{
  "version": 3,
  "sources": ["../src/ocr.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  closeMainWindow,\n  environment,\n  getPreferenceValues,\n  launchCommand,\n  LaunchType,\n  PopToRootType,\n  showHUD,\n  updateCommandMetadata,\n} from \"@raycast/api\";\nimport { spawnSync } from \"child_process\";\nimport fs from \"fs\";\nimport { TranslateMode } from \"./providers/types\";\n\nasync function fetchUnreadNotificationCount() {\n  return 10;\n}\n\nfunction screencapture(file: string) {\n  const { status, stdout, stderr } = spawnSync(\"/usr/sbin/screencapture\", [\"-i\", file], { stdio: \"ignore\" });\n\n  return status;\n}\n\ntype CallbackType = \"deeplink\" | \"launchCommand\";\n\nexport default async function Command() {\n  const { mode, language, level, customWords } = getPreferenceValues<{\n    mode: TranslateMode;\n    language: string;\n    level: string;\n    customWords: string;\n  }>();\n  const callbackType: CallbackType = \"deeplink\";\n  await closeMainWindow({ clearRootSearch: true });\n  const ocrPath = `${environment.assetsPath}/ocr_img`;\n  const binary = `${environment.assetsPath}/ocr`;\n  const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n  const tmpFile = `${ocrPath}/${Date.now()}.png`;\n  await fs.promises.mkdir(ocrPath, { recursive: true });\n  try {\n    await fs.promises.access(binary, fs.constants.X_OK);\n  } catch {\n    await fs.promises.chmod(binary, 0o775);\n  }\n  screencapture(tmpFile);\n  if (fs.existsSync(tmpFile)) {\n    showHUD(\"Processing...\");\n    await delay(1);\n\n    const { status, output, stdout, stderr, error } = spawnSync(binary, [\n      ...(callbackType == \"deeplink\" ? [\"deeplink\", tmpFile] : [tmpFile]),\n      language,\n      `\"${customWords}\"`,\n      level,\n      mode,\n    ]);\n    if (status != 0) {\n      showHUD(`Failed:${stderr ? stderr.toString() : \"none\"}`);\n    } //  else {\n    //   if (callbackType == \"launchCommand\") {\n    //     await launchCommand({\n    //       name: mode,\n    //       type: LaunchType.UserInitiated,\n    //       context: {\n    //         txt: stdout.toString(),\n    //         mode,\n    //         img: tmpFile,\n    //       },\n    //     });\n    //   }\n    // }\n  } else {\n    showHUD(\"Cancel\");\n  }\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EASO,wBACPC,EAA0B,yBAC1BC,EAAe,iBAOf,SAASC,EAAcC,EAAc,CACnC,GAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,CAAO,KAAI,aAAU,0BAA2B,CAAC,KAAMH,CAAI,EAAG,CAAE,MAAO,QAAS,CAAC,EAEzG,OAAOC,CACT,CAIA,eAAOG,GAAiC,CACtC,GAAM,CAAE,KAAAC,EAAM,SAAAC,EAAU,MAAAC,EAAO,YAAAC,CAAY,KAAI,uBAK5C,EACGC,EAA6B,WACnC,QAAM,mBAAgB,CAAE,gBAAiB,EAAK,CAAC,EAC/C,IAAMC,EAAU,GAAG,cAAY,qBACzBC,EAAS,GAAG,cAAY,iBACxBC,EAASC,GAAe,IAAI,QAASC,GAAY,WAAWA,EAASD,CAAE,CAAC,EACxEE,EAAU,GAAGL,KAAW,KAAK,IAAI,QACvC,MAAM,EAAAM,QAAG,SAAS,MAAMN,EAAS,CAAE,UAAW,EAAK,CAAC,EACpD,GAAI,CACF,MAAM,EAAAM,QAAG,SAAS,OAAOL,EAAQ,EAAAK,QAAG,UAAU,IAAI,CACpD,MAAE,CACA,MAAM,EAAAA,QAAG,SAAS,MAAML,EAAQ,GAAK,CACvC,CAEA,GADAZ,EAAcgB,CAAO,EACjB,EAAAC,QAAG,WAAWD,CAAO,EAAG,IAC1B,WAAQ,eAAe,EACvB,MAAMH,EAAM,CAAC,EAEb,GAAM,CAAE,OAAAX,EAAQ,OAAAgB,EAAQ,OAAAf,EAAQ,OAAAC,EAAQ,MAAAe,CAAM,KAAI,aAAUP,EAAQ,CAClE,GAAIF,GAAgB,WAAa,CAAC,WAAYM,CAAO,EAAI,CAACA,CAAO,EACjET,EACA,IAAIE,KACJD,EACAF,CACF,CAAC,EACGJ,GAAU,MACZ,WAAQ,UAAUE,EAASA,EAAO,SAAS,EAAI,QAAQ,SAezD,WAAQ,QAAQ,CAEpB",
  "names": ["ocr_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_fs", "screencapture", "file", "status", "stdout", "stderr", "Command", "mode", "language", "level", "customWords", "callbackType", "ocrPath", "binary", "delay", "ms", "resolve", "tmpFile", "fs", "output", "error"]
}
